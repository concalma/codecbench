#!/usr/bin/env python3

# @@--
#  Copyright (C) 2019 Alberto Vigata
#  All rights reserved
#  
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met
#  
#      * Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#      * Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#      * Neither the name of the University of California, Berkeley nor the
#        names of its contributors may be used to endorse or promote products
#        derived from this software without specific prior written permission.
#  
#  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
#  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
import shutil
import time
import json
import os
import threading
import multiprocessing
import platform
from optparse import OptionParser
import sys
import re
import pickle
import subprocess

#a json encoder that ignores not recognized python types
class PythonObjectEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, (list, dict, str, int, float, bool, type(None))):
            return json.JSONEncoder.default(self, obj)
        return {'_python_object': ''}

def objdump(obj, id=4):
    return json.dumps(obj, cls=PythonObjectEncoder, sort_keys=True, skipkeys=True, indent=id, separators=(',',': '))
                        

class CBError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

class Sequence:
    def __init__(self, seqdef):
        self.__dict__.update(seqdef)
        self.w = self.width
        self.h = self.height
        self.fpsnum = int(self.fpsnum)
        self.fpsden = int(self.fpsden)
        self.nickname= seqdef.get('nickname', seqdef['filename'])
        self.desc= "{nickname} {width}x{height} {format} {frame_count}F {fpsnum}/{fpsden} fps".format(**seqdef)
        
    def plotstr(self):
        return "{nickname} {w}x{h}".format(**self.__dict__)
        
    def __str__(self):
        return self.desc
    

def do_yuv_resize(run, inp, out, clines=None, **pars):
    parscopy = dict(pars)
    parscopy['yuv_input'] = inp
    parscopy['yuv_output'] = out
    parscopy['ffmpeg'] = run['tools']['ffmpeg']
    command = "{ffmpeg} -s:v {in_w}x{in_h} -r {num}/{den} -i {yuv_input} -vf scale={out_w}:{out_h} -c:v rawvideo -pix_fmt yuv420p {yuv_output}".format(**parscopy).split()
    if clines!=None:
        clines.append(command)

    mout = subprocess.check_output(command, stderr=subprocess.STDOUT ).decode('utf-8')


def do_video_metrics(clines=None,**pars):
    supported_metrics = ['psnr','ssim','ms_ssim']
    metrics = pars['metrics']

    #check metric is supported
    for m in metrics:
        if m not in supported_metrics:
            print("{0} metric is not supported by video_metrics".format(m))
            return

    #retrieve metrics
    command = "{vm} -a {input} -b {reconfile} -m {0}  -w {width} -h {height} -v -x {frame_count}".format(",".join(metrics), **pars).split()
    if clines:
        clines.append(command)
    mout = subprocess.check_output(command).decode('utf-8')
        
    vmregex = lambda metric : "(\d+)\({0}\):\s(\S+)\s+Y:(\S+)\s+U:(\S+)\s+V:(\S+)".format(metric)
            
    frame_metrics = {}
    for metric in metrics:
        matches = re.compile(vmregex(metric)).findall(mout)
        if(len(matches)!=pars['frame_count']):
            raise Exception("incorrect video metrics frame count for {0}".format(metric))
        # example of match: [(u'290', u'37.353453', u'35.218697', u'41.111969', u'42.133961'), ...
        (f,g,y,u,v) = zip(*matches)
        frame_metrics[metric] = {'g': [float(val) for val in g], 'y': [float(val) for val in y], 'u': [float(val) for val in u], 'v': [float(val) for val in v] } 
            
    
    psnr = re.compile("psnr: (.+)$", re.MULTILINE ).search(mout).group(1) if 'psnr' in metrics else 0 
    ssim = re.compile("ssim: (.+)$", re.MULTILINE ).search(mout).group(1) if 'ssim' in metrics else 0
    ms_ssim = re.compile("ms_ssim: (.+)$", re.MULTILINE ).search(mout).group(1) if 'ms_ssim' in metrics else 0
    return {'psnr':float(psnr), 'ssim':float(ssim), 'ms_ssim':float(ms_ssim), 'frame_metrics':frame_metrics}

    
def file_todataurl(file):
    import base64
    ext = os.path.splitext(file)[1]
    extmime = { '.jpg':'image/jpeg', '.jpeg':'image/jpeg', '.gif':'image/gif','.png':'image/png', '.svg':'image/svg+xml'}
    if not ext in extmime:
        print("{0} is an unknown extension".format(ext))
        return ""
    #read file
    with open(file, "rb") as f:
        data = f.read()

    pars = {}
    pars['mimetype'] = extmime[ext]
    pars['data'] = base64.b64encode(data).decode('utf-8')

    return "data:{mimetype};base64,{data}".format(**pars)

def load_sequences(gconf):
    seqdirs = gconf['defaults']['sequence_dirs']
    seqdict = gconf['seqs'] = {}
    """ does a run for codec with conf """
    for seqdir in seqdirs:
        for root,dirs,files in os.walk(gconf['cwd']+os.sep+seqdir):
            for f in files:
                if(f.endswith(".info") or f.endswith(".json")):
                    ff = os.path.abspath("{0}{1}{2}".format(root,os.sep,f))
                    with open(ff,'r') as jsonfile:
                        seqdef = json.loads( jsonfile.read() )
                        seqdef['abspath'] = os.path.abspath("{0}{1}{2}".format(root,os.sep,seqdef['filename']))
                        
                        if 'fpsnum' not in seqdef or 'fpsden' not in seqdef:
                            print("{0} sequence does not have framerate info. skipping ...".format(seq.desc))
                            continue

                        seq = Sequence(seqdef)
                        seqdict[seq.nickname] = seq.__dict__
                        print ("added sequence {abspath} [{desc}]".format(**seq.__dict__))
                        

def load_codecs(gconf):
    codecdirs = gconf['defaults']['codec_dirs']
    codecdict = gconf['codecs'] = {}
    gconf['codec_modules'] = gconf.get('codec_modules',[])
    
    for codecdir in codecdirs:
        for root,dirs,files in os.walk(gconf['cwd']+os.sep+codecdir):
            for f in files:
                if(f=="codec.py"):
                    sys.path.insert(0,os.path.abspath(root))
                    # this will import the codec definition and the handlers
                    # if there is init function, use that to get cdef
                    import codec
                    
                    if 'init' in codec.__dict__:
                        cdef = codec.init(gconf).copy()
                    else:
                        cdef = codec.codec.copy()
                        
                    cdef['version']      = cdef.get('version', '?')
                    cdef['version_long'] = cdef.get('version_long', '??')
                        
                    codecdict[ cdef['nickname']] = cdef
                    print ("added codec {nickname} => ({version})".format(**cdef))
                    if gconf.get('verbose',False):
                        print(objdump(cdef))
                        
                    gconf['codec_modules'].append(sys.modules['codec'])
                    sys.path.pop(0)     
                    codec = None
                    del sys.modules['codec']      
                    
                    
                    
#returns dict with abs paths to all the tools
def get_tools_paths(gconf):
    native_root = "{root}{sep}tools{sep}native{sep}{platform}{sep}".format(**gconf)
    exe = '.exe' if gconf['platform'].startswith('windows') else ''
    
    ret = {'vm': os.path.abspath(native_root+'video_metrics'+exe),
            'ffprobe' : os.path.abspath(native_root+'ffprobe'+exe),
            'ffmpeg' : os.path.abspath(native_root+'ffmpeg'+exe),
            'vgtmpeg' : os.path.abspath(native_root+'vgtmpeg'+exe),
            'mp4box' :  os.path.abspath(native_root+'MP4Box'+exe),
            'h265refdec' : os.path.abspath(native_root+'TAppDecoder'+exe),
            'do_video_metrics' : do_video_metrics,
            'do_yuv_resize': do_yuv_resize }

    if not os.path.isfile(ret['vm']):
        print("can't find video metrics for this platform: "+ run['tools']['vm'])
        exit()
    
    return ret
        

def expand_runs(gconf, testconfig):      


    gconf['runs'] = []
    gconf['original_config'] = testconfig

    for rconfig in testconfig['runs']:
        run = {}
        run['config'] = rconfig 
        run['tools'] = get_tools_paths(gconf)
        run['metrics'] = testconfig['metrics'] if 'metrics' in testconfig else ['psnr']
        run['keeprecon'] = testconfig['keeprecon']
        run['frame_count'] = testconfig['frame_count'] if 'frame_count' in testconfig else 0

        expand_run(run, gconf['runs'], gconf)
    
    print("expanded to {0} runs".format(len(gconf['runs'])))
                      
def expand_run(r, runs, gconf):

    #expand_keys = gconf['expand_keys']
    expanded = 0
    
    run = r.copy()
    run['config'] = run['config'].copy()
    config = run['config']
    
    if config.get('ignore', False):
        return
    
    # check for bitrate range expansion
    if 'bitrate_range' in config:
        if len(config.get('bitrate_range',[]))!=3:
            print('ignoring bitrate range on config because there are not just 3 values. should be [start,stop,step]')
        else:
            a = [i for i in range(*config['bitrate_range'])]
            print('expanded bitrate list to: ' + str(a) ) 
            del config['bitrate_range']
            config['bitrate'] = a
            
    #for key in expand_keys:
    for key in config:
        if(isinstance(config[key],list) and len(config[key])>1 ):
            for item in config[key][:]:
                config[key] = item
                expand_run(run, runs, gconf)
                expanded = 1
            break
                
    if(not expanded):
        #adapt those keys with single list items
        for key in config:
            if(isinstance(config[key],list) and len(config[key])==1 ):
                config[key] = config[key][0]

        #expand seq
        if not config['seq'] in gconf['seqs'].keys():
            print("{0} sequence is not one of the available sequences".format( config['seq']))
            sys.exit(1)
            
        if not config['codec'] in gconf['codecs'].keys():
            print("{0} codec is not one of the available codecs" .format(config['codec']))        
            sys.exit(1)
                
        run['seq'] = gconf['seqs'][config['seq']]
        run['codec'] = gconf['codecs'][config['codec']]
        
        #safety checks
        gconf['runtime_ignore_keys'] = ['ignore','clobber']
        for key in run['config']:
            if not key in run['codec']['supported_pars'].keys() and key!='seq' and key !='codec' and key not in gconf['runtime_ignore_keys']:
                print("codec {0} doesn't support parameter {1}".format(run['config']['codec'], key ))
                sys.exit(1)
        
        run['frame_count'] = run['seq']['frame_count'] if run['frame_count']==0 else run['frame_count']
                
        runs.append(run)
                
def dictcopy_minus_keys(d, keys):
    ret = d.copy()
    for key in keys:
        if key in ret:
            del ret[key]
    return ret
        
def do_run(run, gconf,sem, index):
    try:
        sem.acquire()

        name = ""
        for e in sorted(dictcopy_minus_keys(run['config'], gconf['runtime_ignore_keys'] ).keys()):
            name += "{0}_{1}__".format(e, run['config'][e])
        
        print("running {0} {1}/{2}".format(name, index, len(gconf['runs'])))
        if( run['config'].get('ignore',False) ):
            print("ignore flag is set. skipping ...")
            return
        
        run['platform'] = gconf['platform']
        run['config_name'] = name
        run['base_path'] = os.path.abspath('.') +os.sep+'runs'+os.sep+name+os.sep
        runinfo_path = run['base_path'] + os.sep + 'runinfo.json'
        
        if run['config'].get('clobber', False):
            if os.path.exists(run['base_path']):
                print("clobbering {0} ...".format(run['base_path']))
                import shutil
                shutil.rmtree(run['base_path'])
                
        if not os.path.exists(runinfo_path):
            os.makedirs(run['base_path']) if not os.path.exists(run['base_path']) else None
            
            run['output'] = run['base_path']+'out' 
            run['recon'] = run['base_path']+'recon.yuv'
            
            hdlr = run['codec']['handler']
            if not callable(hdlr):
                print("could not find handlder for codec '{1}'".format(run['codec']['nickname']))
            else:
                starttime = time.time()
                hdlr(run)
                stoptime = time.time()
                run['runtime_in_s'] = stoptime - starttime
            
            with open(run['base_path']+'runinfo.json','w') as rfile:
                #json.dumps can't easily handle non trivial json values, so we remove the handler from serialization
                runs = run.copy()
                #runs['codec']=None
                rfile.write(objdump(runs))
            print("done {0}".format(name))
        else:
            print("using existing run at " + runinfo_path)
            with open(runinfo_path, "r") as f:
                run.update( json.loads(f.read()))
                
                
            
    except Exception as e:
        raise e
    finally:
        sem.release()
    
    
def runs_with_seq(runs, name):
    """retuns list with only one specific sequence"""
    r = []
    for run in runs:
        r.append(run) if run['seq']['nickname']==name else None
    return r

def report_sequences(runs):
    seqs = {}
    for run in runs:
        seqs[run['config']['seq']] = True
    return list(seqs.keys())


def report_find_x_from_y(plot,y):
    """Given a set of points that define a plot, find the corresponding x given the y
    assume x and y are
    plot: a list of tuples with points
    y: the point to find x for
    """
    pcount = len(plot)

    if(pcount<2):
        print("length of plot is less than 2")
        if(pcount==1):
            return plot[0][0]
        else:
            return 0

    # select the line to interpolate
    
    # if y is over the last point just select the last line
    if(y>= plot[pcount-1][1] ):
        (x0, y0, x1, y1) = (plot[pcount-2][0], plot[pcount-2][1], plot[pcount-1][0], plot[pcount-1][1])
    elif y< plot[0][1]:
        (x0, y0, x1, y1) = (plot[0][0], plot[0][1], plot[1][0], plot[1][1])
        pass
    else:
        # else iterate through points to select
        for i in range(1, pcount):
            if(y<plot[i][1] and y>=plot[i-1][1]):
                (x0, y0, x1, y1) = (plot[i-1][0], plot[i-1][1], plot[i][0], plot[i][1])
                break
            

    assert('x0' in locals())
    
    # line eq:  y = s*x + k  | x = (y-k) / s
    # s = y1-y0/x1-x0
    # k = y1 - s*x1
    s = (y1-y0)/(x1-x0)
    k = y1 - s*x1
    x = (y-k) / s
    return x

def reports_rdcurve_create_plot(seqplots, report, repopt ):
    import matplotlib
    #matplotlib.use('svg')

    import matplotlib.pyplot as plt
    
    #rd curve creation
    rdcurves = {}
    
    ret = {'ref_plotid':None}
    metric = report['metric']

    htmlout = "<h1> RD curves ({0})</h1>".format(report['metric'])

    matplotlib.rc('font', **{'weight':'normal','size': report['fontsize']})
    
    for seq in seqplots:
        plt.figure(figsize=(report['width']/report['dpi'],report['height']/report['dpi']),dpi=report['dpi']) #figsize is in inches
        bitref = []
        
        #determine reference metric value
        # if not specified on report, try to gather from sequence information
        if 'seqref' in report and seq in report['seqref']:
            ref = report['seqref'][seq]
        else:
            ref = report['ref']
        
        for plotid in  seqplots[seq]:
            p = zip(seqplots[seq][plotid]['x'], seqplots[seq][plotid]['y'])
            p = sorted(p, key= lambda a: a[0])
            if len(list(p))<2:
                raise CBError("plotid {0} has only one RD point. Aborting report".format(plotid))
            x,y = zip(*p)
            seqplots[seq][plotid]['extrap'] = extrapolate(x,y)
            seqplots[seq][plotid]['extrap_inv'] = extrapolate(y,x)
            
            #this assumes only one plot per seq
            if metric=='ssim' or metric=="ms_ssim":
                rdcurves[seq] = {}
                rdcurves[seq]['rdfunc'] = rcfunc(x, y)
                rdcurves[seq]['rdfuncinv'] = rcfunc(y, x)
                rdcurves[seq]['w'] = seqplots[seq][plotid]['w'] 
                rdcurves[seq]['h'] = seqplots[seq][plotid]['h'] 
            

            x = [n/1000 for n in x]
            line, = plt.plot(x,y, 'o-', label=plotid, linewidth=2)
            seqplots[seq][plotid]['line'] = line
            plt.xlabel('kbps')
            plt.ylabel(metric.upper())
            plt.title(seqplots[seq][plotid]['title'])

            # draw line at reference
            if ref: 
                br=report_find_x_from_y(list(zip(x,y)), ref)
                bitref.append( { 'bitref': br, 'plotid':plotid, 'line':line })
                if not report.get('cabs_area', False):
                    plt.axhline( [ref], linestyle='-.', linewidth=1, color='k')
                    plt.axvline( [br], linestyle='-.', linewidth=1, color='k')
    
        #draw legend of plots    
        if ref:
            bitref = sorted( bitref, key=lambda a: a['bitref'])
            for br in bitref:
                br['perfpc'] =  -((bitref[len(bitref)-1]['bitref'] - br['bitref']  ) / bitref[len(bitref)-1]['bitref'] ) 
            llines = []
            llabel = []
            for br in bitref:
                llabel.append( ("{0} ({1:.0%})" if br['perfpc']!=0 else "{0} (ref)").format(br['line'].get_label(), br['perfpc']))
                llines.append(br['line'])
                if br['perfpc']==0:
                    ret['ref_plotid'] = br['plotid']
                    
            if report['legend_show']:
                plt.legend(tuple(llines), tuple(llabel),loc=4)
        else:
            if report['legend_show']:
                plt.legend(loc=4)
            
        #draw cabs area between the reference plot and the first plot available. This is meant to
        # be used only with two RD curves
        import numpy as np
        if report.get('cabs_area', False) and ref and ret['ref_plotid']!=None and len(seqplots[seq])>1 and True:
            for plotid in seqplots[seq]:
                #skip is this is reference
                if plotid==ret['ref_plotid']:
                    continue
                # draw area here
                if 'cabs_bitref_range' in report and seq in report['cabs_bitref_range']:
                    bitref_range_low =  report['cabs_bitref_range'][seq][0]
                    bitref_range_high = report['cabs_bitref_range'][seq][1]
                else:
                    bitref_range_low = report['bitref_range'][0]
                    bitref_range_high= report['bitref_range'][1]

                # compute Mlow, Mhigh
                m_low =  seqplots[seq][ret['ref_plotid']]['extrap']( np.array([bitref_range_low *1000]) ) 
                m_high = seqplots[seq][ret['ref_plotid']]['extrap']( np.array([bitref_range_high *1000]) )  
                yy = np.linspace( m_low, m_high, 1001 )
                aa = seqplots[seq][ret['ref_plotid']]['extrap_inv'](yy) / 1000
                bb = seqplots[seq][plotid]['extrap_inv'](yy) / 1000
                avg = ((aa-bb)/aa).mean()
                plt.fill_betweenx(yy, bb, aa, alpha=0.5,color='g' )
                if report['legend_show']:
                    plt.legend(tuple([seqplots[seq][plotid]['line'],seqplots[seq][ret['ref_plotid']]['line']]), tuple([plotid + " CABS({0:.0%})".format(avg), ret['ref_plotid'] + " (ref)"]),loc=4)
                
                
            
        plt.axis('auto')

        imgfile = repopt['reports_dir'] + os.sep +"report_"+seq+"_"+metric+"."+report['format']
        plt.savefig(imgfile)
        htmlout += "<img src='{0}'/>\n".format(file_todataurl(imgfile))
        
    #rdcurve logic here
    rds = sorted( rdcurves.values(), key = lambda a : int(a['w'])*int(a['h']), reverse = True )
    
    if 'minqual' in report:
        #minqual is a scalar or a list. 
        minquals = report['minqual'] if type(report['minqual']) is list else [report['minqual']]
        htmlout += "<p>"
        for minqual in minquals:
            for i in range(0,len(rds)):
                brswitch = rds[i]['rdfuncinv'](minqual)
                if(i<len(rds)-1):
                    nextres_qual = rds[i+1]['rdfunc'](brswitch)
                    htmlout += ("Bitrate switch for {0}x{1}@{2} at {3} bps. {4}x{5} qual at br is {6}<br>".format(rds[i]['w'], rds[i]['h'], minqual, \
                                                                                                  brswitch, rds[i+1]['w'], rds[i+1]['h'], nextres_qual ))
                else: #rdcurve min resolution
                    htmlout += ("Minimum bitrate for {0}x{1}@{2} at {3} bps.<br>".format(rds[i]['w'], rds[i]['h'], minqual, brswitch)) 

            htmlout += "</br>"
        htmlout += "</p>"
        
    repopt['htmlout'] = htmlout   
    return ret
    #show()
    
       # with open("fig.html","w") as out:
       #     out.write( mpld3.fig_to_html(fig) )
       
#this extrapolate function extends interp1d over the range
def extrapolate(x,y):
    from scipy.interpolate import interp1d
    from scipy import arange, array, exp
    
    f_i = interp1d(x,y)
    xs = f_i.x
    ys = f_i.y

    def pointwise(x):
        if x < xs[0]:
            return ys[0]+(x-xs[0])*(ys[1]-ys[0])/(xs[1]-xs[0])
        elif x > xs[-1]:
            return ys[-1]+(x-xs[-1])*(ys[-1]-ys[-2])/(xs[-1]-xs[-2])
        else:
            return f_i(x)

    def ufunclike(xs):
        return array(list(map(pointwise, array(xs))))

    return ufunclike

def rcfunc(x,y):
    from scipy.interpolate import interp1d
    from scipy import arange, array, exp
    import numpy as np
    import scipy

    f_i = interp1d(x,y)
    xs = f_i.x
    ys = f_i.y
    f_i = scipy.interpolate.PchipInterpolator(x,y)

    def pointwise(x):
        if x < xs[0]:
            return np.asscalar(ys[0]+(x-xs[0])*(ys[1]-ys[0])/(xs[1]-xs[0]))
        elif x > xs[-1]:
            return np.asscalar(ys[-1]+(x-xs[-1])*(ys[-1]-ys[-2])/(xs[-1]-xs[-2]))
        else:
            return np.asscalar(f_i(x))

    return pointwise
       
def report_create_cabs(seqs, report, ref_plotid=None, repopt=None ):
    if not ref_plotid:
        print('couldnt calculate cabs score because no reference plot id was specified')
        return
    
    import numpy as np
    """ Given:
        - a codec configuration
        - a sequence or set of sequences
        - a bitrate range of interest
    """
    
    
    # compute extrapolate functions
    for seq in seqs:
        for plotid in seqs[seq]:
            p = zip(seqs[seq][plotid]['x'], seqs[seq][plotid]['y'])
            p = sorted(p, key= lambda a: a[0])
            x,y = zip(*p)
            seqs[seq][plotid]['extrap'] = extrapolate(x,y)
            seqs[seq][plotid]['extrap_inv'] = extrapolate(y,x)
    
        
        
    # compute cabs score to reference 
    results = {'bitref_range': report.get('cabs_bitref_range', report.get('bitref_range')), 'metric':report['metric'], 'per_sequence': {}, 'global':{}}
    for seq in seqs:
        for plotid in seqs[seq]:
                if 'cabs_bitref_range' in report and seq in report['cabs_bitref_range']:
                    bitref_range_low =  report['cabs_bitref_range'][seq][0]
                    bitref_range_high = report['cabs_bitref_range'][seq][1]
                else:
                    bitref_range_low = report['bitref_range'][0]
                    bitref_range_high= report['bitref_range'][1]

                # compute Mlow, Mhigh
                m_low =  seqs[seq][ref_plotid]['extrap']( np.array([ bitref_range_low  *1000]) ) 
                m_high = seqs[seq][ref_plotid]['extrap']( np.array([ bitref_range_high *1000]) )  
                yy = np.linspace( m_low, m_high, 1001 )
                aa = seqs[seq][ref_plotid]['extrap_inv'](yy)
                bb = seqs[seq][plotid]['extrap_inv'](yy)
                avg = ((aa-bb)/aa).mean()
                seqs[seq][plotid]["cabs"] = avg
                results['global'][plotid] = results['global'].get(plotid, {'cabs':0,'count':0,'plotid':plotid})
                results['global'][plotid]['cabs'] += avg
                results['global'][plotid]['count'] += 1
        
        s = sorted( seqs[seq].values(), key = lambda a: a['cabs'] )
        ss = [{'cabs':i['cabs'],'plotid':i['plotid']} for i in s ]
        results['per_sequence'][seq] = ss
        
    #finish calculating global caps
    for plotid in results['global']:
        results['global'][plotid]['cabs'] = results['global'][plotid]['cabs'] / results['global'][plotid]['count']
        
    s = sorted( results['global'].values(), key = lambda a: a['cabs'] )
    ss = [{'cabs':i['cabs'], 'plotid':i['plotid']} for i in s]
    results['global']['ordered'] = ss
            

    cabsreportname = repopt['reports_dir'] + os.sep + "report_cabs_"+report['metric']+".json"
    
    # write text file
    with open(cabsreportname, "w") as f:
        f.write(objdump(results))
    
    #create plot
    import matplotlib.pyplot as plt
    import numpy as np
    
    i=1
    sbcount = len(results['per_sequence'].keys()) + 1
    plt.figure()
    plt.subplots_adjust(left =0.3, hspace=1)
    for seq in results['per_sequence']:
        plt.subplot(sbcount, 1, i)
        i+=1
        ss = results['per_sequence'][seq]
        ypos = np.arange(len(ss))
        values = [s['cabs'] for s in ss]
        labels = [s['plotid'] for s in ss]
        plt.barh(ypos, values, align='center', alpha=0.4)
        plt.yticks(ypos, labels)
        plt.title(seq)
    
    #finally global results
    plt.subplot(sbcount, 1, i)
    ss = results['global']['ordered']
    ypos = np.arange(len(ss))
    values = [s['cabs'] for s in ss]
    labels = [s['plotid'] for s in ss] 
    plt.barh(ypos, values, color='green', align='center', alpha=0.4)
    plt.yticks(ypos, labels)
    plt.title("Global")
    imgfile = repopt['reports_dir'] + os.sep + "report_cabs_"+report['metric']+'.'+report.get('format')
    plt.savefig(imgfile)
    repopt['htmlout'] = "<h1>CABSscore info</h1><img src='{0}'/>".format(file_todataurl(imgfile))

def report_create_ratedistortion(gconf, runs, report  ):
    metric = report['metric']
    seqs = {}
    
    #create unique plot ids for every run
    for run in runs:
        plotid = ''
        for key in sorted(run['config'].keys()):
            plotid += "{0}:{1}_".format(key, run['config'][key]) if key!='bitrate' and key!='seq' and key not in gconf['runtime_ignore_keys'] else ""
        plotid = plotid[:-1]
        
        seqname = run['config']['seq']

        if 'results' not in run:
            raise CBError('results not available for {0}'.format(run['config_name']))
        
        # make sure dics  and lists are created
        seqs[seqname] = {} if seqname not in seqs else seqs[seqname]
        seqs[seqname][plotid] = {'x':[], 'y':[]} if plotid not in seqs[seqname] else seqs[seqname][plotid]
        seqs[seqname][plotid]['x'].append(run['results']['bps'])
        seqs[seqname][plotid]['y'].append(run['results'][metric])
        seqs[seqname][plotid]['plotid'] = plotid
        seqs[seqname][plotid]['title'] = Sequence(run['seq']).plotstr() + " " + metric.upper()
        seqs[seqname][plotid]['w'] = run['seq']['w']
        seqs[seqname][plotid]['h'] = run['seq']['h']
        
        run['plotid'] = plotid
    
    import matplotlib
    # setting matploblig backend
    mpl_backend_map = { 'png' : 'Agg', 'svg' : 'svg', 'pdf':'pdf' }
    matplotlib.use( mpl_backend_map.get( report.get('format','svg'), report.get('format','svg' )))        

    reports_dir = 'reports'+os.sep + report['name']
    os.makedirs(reports_dir) if not os.path.exists(reports_dir) else None
    repopt = {'htmlout':"", 'reports_dir': reports_dir}
    html =""
    try:
        rdret = reports_rdcurve_create_plot(seqs,report, repopt)
        html += repopt['htmlout']
        
        repopt['htmlout'] = ""
        report_create_cabs(seqs, report, rdret['ref_plotid'], repopt )
        html += repopt['htmlout']
        
        # codec specs in html file
        html+= "<h1>Codec Signatures</h1><pre lang='javascript'>{0}</pre>".format(objdump(gconf['codecs']))
        html+= "<h1>CODECbench configuration</h1><pre lang='javascript'>{0}</pre>".format(objdump(gconf['original_config']))
        
        total_encode_time = 0
        html_clines  = "<h1>Command lines</h1>"
        for run in runs:
            html_clines += "<h3>{0}</h3>".format(run['config_name'])
            html_clines += "<pre lang='javascript' style='font-size: 0.5em;'>{0}</pre>".format(objdump(run['results']))
            total_encode_time += run['results']['encodetime_in_s']
        html_clines += "<h1>Encode time</h1> total: {0} seconds<br>{1} sec per run".format(total_encode_time, total_encode_time/len(runs))
            
        with open(reports_dir+os.sep+"report_{0}.html".format(report['metric']),'w') as htout:
            htout.write(html)
            
        with open(reports_dir+os.sep+"report_{0}_command_lines.html".format(report['metric']),'w') as htout:
            htout.write(html_clines)
            
    except CBError as e:
        print(str(e))
        
def report_bitrate(runs):
    """creates a bitrate graph for every sequence and all configurations for that sequence"""
    
    

    
def remove_comments(s):
    return re.sub('//.*$','',s,0,re.M) # replace all occurences of comments (0) with multiline flag (re.M)
    
def reports_generate(gconf,runconfig):
    if not 'reports' in runconfig:
        return

    defaults = runconfig['reports'].get('defaults', {})

    if not 'reports' in runconfig['reports']:
        print("no reports defined in reports section?")
        return
    
    """ generate reports """
    for report in runconfig['reports']['reports']:
        r = {}
        r.update(defaults)
        r.update(report)

        #TODO implement 'type' of report
        #TODO implement 'seq' selector on report
        if not 'metric' in r:
            continue
        r['name'] = r.get('name', os.path.splitext(os.path.basename(runconfig['origin']))[0]) 
        r['ref'] = r.get('ref') #make sure there is a value even if its None
        r['format'] = r.get('format', 'png')
        r['width'] = r.get('width',1600)
        r['height'] = r.get('height',1200)
        r['dpi'] = r.get('dpi',100)
        r['fontsize'] = r.get('fontsize',16)
        r['bitref_range'] = r.get('bitref_range', [250,775])
        r['legend_show'] = r.get('legend_show', True)

        try:
            if 'res' in r:
                r['width'], r['height'] = int(re.findall('(\d+)x', r['res'])[0]), int(re.findall('x(\d+)', r['res'])[0])
        except:
            pass
            
        report_create_ratedistortion(gconf, gconf['runs'], r )

machine_map = {'amd64':'x86_64'}


# takes file and decodes it into yuv on the sequence folder
def importseq(gconf, infile, nick=None, count=None):
    if len(gconf['defaults']['sequence_dirs']) == 0:
        print("there's no sequence dir defined in configuration file")
        return


    if not os.path.isfile(infile):
        print("can't find input file {}\n".format(infile))
        return

    infile = os.path.abspath(infile)

    # create imported folder inside sequences
    seqfolder = os.path.abspath( gconf['cwd'] + os.sep + gconf['defaults']['sequence_dirs'][0] ) + os.sep + "imported"
    os.makedirs(seqfolder) if not os.path.exists(seqfolder) else None
    
    # find media info for file using ffprobe
    proc = subprocess.Popen([gconf['tools']['ffprobe'], '-v', 'quiet', '-print_format', 'json', '-show_format', '-show_streams', infile], stdout=subprocess.PIPE)
    out = proc.communicate()[0]
    minfo = json.loads(out)
    vst = None
    # grab first video stream
    vst = minfo['streams'][0] if len(minfo['streams'])>0 else None
    if vst==None:
        print("couldnt find video stream to import")
        return
    base = os.path.splitext(os.path.basename(infile))[0]

    spars = {}
    spars['format'] = '420P'
    spars['width'] = vst['width']
    spars['height'] = vst['height']
    spars['fpsnum'] = vst['r_frame_rate'].split('/')[0]
    spars['fpsden'] = vst['r_frame_rate'].split('/')[1]
    spars['framesize'] = int( spars['width'] * spars['height'] * 1.5)  #yuv420 for now
    spars['nickname'] = nick if nick!=None else base
    spars['filename'] = base + '.yuv'
    #framecount to be calculated after conversion

    # yuv decode
    yuvfile = os.path.abspath( seqfolder + os.sep + spars['filename']  )
    yuvdesc = yuvfile + '.json'

    # ffmpeg -i video.mp4 -c:v rawvideo -pix_fmt yuv420p out.yuv
    print("importing {} into {}\n".format(infile, yuvfile))
    proc = subprocess.Popen([gconf['tools']['ffmpeg'], '-i', infile, '-y', '-c:v:0', 'rawvideo', '-pix_fmt', 'yuv420p', yuvfile], stdout=subprocess.PIPE )
    out = proc.communicate()[0]

    # calculate number of frames 
    filesize = os.path.getsize(yuvfile)
    if filesize==0:
        print('converted file has only 0 bytes\n')
        return
    spars['frame_count'] = int(filesize / spars['framesize'])

    #write description json out
    with open(yuvdesc, 'w') as outfile:
        json.dump(spars, outfile)
    print('wrote {} frames [{}x{}@{}/{}] into {}\n'.format(spars['frame_count'], spars['width'], spars['height'], spars['fpsnum'], spars['fpsden'], yuvfile))
    return








    


def main(argv):
    gconf = {'root': os.path.abspath( os.path.dirname( __file__ )), 'sep' : os.sep, \
             'cwd': os.path.abspath(os.getcwd()), \
             'platform': platform.system().lower()+"-"+ machine_map.get(platform.machine().lower(), platform.machine().lower()), \
            'version' : '0.5.12', 'author' : 'Alberto Vigata', 'year': 2019}

    print(gconf['root'])
    

    print("This is codecbench {version} [{author} {year}] starting up on {platform}".format(**gconf))
    parser = OptionParser()
    parser.add_option("-i", "--input", dest="infile", help="the codec regression configuration file")
    parser.add_option("-r", "--report", dest="report", help="do reports")
    parser.add_option("-x", "--clean", action="store_true", dest="clean", help="clean runs and reports")
    parser.add_option("-c", "--config", dest="config", default="codecbench.config", help="the main config file, defaults to 'codecbench.config'")
    parser.add_option("-v", "--verbose",action="store_true", dest="verbose",default=False )
    parser.add_option("--dump-codecs", action="store_true",   dest="dump_codecs",  help="Dumps codecpacks signatures")
    parser.add_option("--import", dest="importseq", help="Imports a file and prepares as a sequence for testing in the sequences directory. Use --nickname option to specify seq nickname")
    parser.add_option("--nickname", dest="nickname", help="Used in conjunction with --import to specify imported sequence nickname")
    parser.add_option("--framecount", dest="framecount", help="When used with import imports this number of frames")

    (options, args) = parser.parse_args()
    
    import pprint
    pp = pprint.PrettyPrinter(indent=4)
    if options.verbose:
        gconf['verbose'] = True
        pp.pprint(gconf)
    
    #load global config
    with open( gconf['cwd'] + '/' + options.config,"r") as f:
        gconf['defaults'] = json.loads(remove_comments(f.read()))
        
    gconf['tools'] = get_tools_paths(gconf)

    tmpdir =    gconf['cwd']+os.sep+'tmp'
    os.makedirs(tmpdir) if not os.path.exists(tmpdir) else None #create temp dir

    # import
    if options.importseq:
        importseq(gconf, options.importseq, options.nickname, options.framecount )
        return

    #load sequences and codec packs
    load_sequences(gconf)
    load_codecs(gconf)

    #delete runs and reports folder
    if options.clean:
        runpath = os.path.abspath( gconf['cwd'] + os.sep + 'runs' )
        reppath = os.path.abspath( gconf['cwd'] + os.sep + 'reports' )
        tmppath = os.path.abspath( gconf['cwd'] + os.sep + 'tmp' )
        print('deleting runs at {0}'.format(runpath))
        shutil.rmtree(runpath, ignore_errors=True)
        print('deleting reports at {0}'.format(reppath))
        shutil.rmtree(reppath, ignore_errors=True)
        shutil.rmtree(tmppath, ignore_errors=True)

    if options.dump_codecs:
        print(objdump(gconf['codecs']))
        exit()
    
    if options.infile == None:
        print("A runs configuration file must be specified with --input")
        exit()
    

    #load configuration file, or write one if it doesn't exist

    print("loading " + os.path.abspath(options.infile))
    try:
        with open(options.infile, 'r') as cfile:
            runconfig = json.loads(remove_comments(cfile.read()))
            runconfig['origin'] = options.infile
            
    except ValueError as e:
        print("There was a problem reading the configuration file {0}\n{1} ".format(options.infile, str(e)))
        return
    
    expand_runs(gconf, runconfig)
    sem = threading.BoundedSemaphore(value=multiprocessing.cpu_count())
    ts = []
    i = 0
    for run in gconf['runs']:
        t = threading.Thread(target=do_run,args=(run,gconf,sem,i))
        t.start()
        ts.append(t)
        i+=1
        

    for t in ts:
        t.join()
 
        
    reports_generate(gconf, runconfig)



if __name__ == "__main__":
    main(sys.argv)


